version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: horse_racing
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for job queuing and caching
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Scrapy Application
  scrapy-app:
    build:
      context: .
      dockerfile: Dockerfile.scrapy
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/horse_racing
      REDIS_URL: redis://redis:6379/0
      PYTHONPATH: /app
    volumes:
      - ./horse_racing_scraper_scrapy:/app/horse_racing_scraper_scrapy
      - ./logs:/app/logs
    command: ["python", "-m", "celery", "worker", "-A", "horse_racing_scraper_scrapy.tasks", "--loglevel=info"]

  # Scheduler for running spiders
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.scheduler
    restart: unless-stopped
    depends_on:
      - scrapy-app
      - redis
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/horse_racing
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ./scheduler:/app/scheduler
      - ./logs:/app/logs
    command: ["python", "scheduler.py"]

  # dbt for data transformation
  dbt:
    build:
      context: .
      dockerfile: Dockerfile.dbt
    restart: "no"  # Run on-demand
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/horse_racing
    volumes:
      - ./dbt_transform:/app/dbt_transform
      - ./logs:/app/logs
    working_dir: /app/dbt_transform
    command: ["dbt", "run", "--profiles-dir", "."]

  # Nginx for API and docs serving
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./dbt_transform/target:/usr/share/nginx/html/docs
    depends_on:
      - dbt

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge